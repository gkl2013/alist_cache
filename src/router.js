import t from"express";import e from"body-parser";import{Level as o}from"level";import{createClient as a}from"webdav";const n=new o("./database"),s="SCANNING_IS_DOING",r=async(t,e)=>{console.log("=======insert",t),await n.put(t,JSON.stringify(e))},c=async t=>{try{const e=await n.get(t);return e?JSON.parse(e):[]}catch(t){return console.log("=======err",t),[]}},i=async t=>{try{return await n.del(t)}catch(t){return void console.log("=======",t)}},p=async t=>{await n.put(s,String(t))};var l={protocol:"http",host:"101.35.113.109",port:5244,username:"test",password:"test"};const d=()=>(console.log("=======config",l,"object"),new Promise((t=>t(l)))),g=(t=[])=>{let e='<?xml version="1.0" encoding="UTF-8"?><D:multistatus xmlns:D="DAV:">';return t.forEach((t=>{e+="<D:response>",e+=`<D:href>/dav/${t.filename.replace("/","")}</D:href>`,e+="<D:propstat><D:prop>",e+=`<D:displayname>${t.basename}</D:displayname> `,e+=`<D:getlastmodified>${t.lastmod}</D:getlastmodified> `,e+=`<D:getcontentlength>${t.size}</D:getcontentlength>`,e+=`<D:resourcetype>${"directory"===t.type?'<D:collection xmlns:d="DAV:" />':""}</D:resourcetype>`,t.mime&&(e+=`<D:getcontenttype>${t.mime}</D:getcontenttype>`),t.etag&&(e+=`<D:getetag>${t.etag?`"${t.etag}"`:""}</D:getetag>`),e+="</D:prop><D:status>HTTP/1.1 200 OK</D:status></D:propstat>","directory"===t.type&&(e+="<D:propstat> <D:prop> <D:getcontentlength></D:getcontentlength> <D:getetag></D:getetag> <D:getcontenttype></D:getcontenttype> </D:prop> <D:status>HTTP/1.1 404 Not Found</D:status> </D:propstat>"),e+="</D:response>"})),e+="</D:multistatus>",e},m=async(t,e)=>{const o=decodeURIComponent("/dav"===t.url?"/":t.url.replace("/dav",""));console.log("=======path",o),o||e.send("参数错误");if(delete t.headers.host,"GET"===t.method){const{protocol:t,port:a,host:n,username:s,password:r}=await d(),c=`${t}://${s}:${r}@${n}:${a}/dav${encodeURIComponent(o)}`;e.redirect(c)}if("PROPFIND"===t.method){const t=await(async t=>{const e=await c(t);return g(e)})(o);t?(e.set("Content-Type","application/xml"),e.status(207).send(t)):e.send("参数错误")}},D=(t=500)=>new Promise((e=>setTimeout((()=>e(!0)),t)));let u=null;const f=async(t,e=!0)=>{try{const o=await(async()=>{if(u)return u;const{protocol:t,port:e,host:o,username:n,password:s}=await d();return u=a(`${t}://${o}:${e}/dav`,{username:n,password:s}),u})(),n=await o.getDirectoryContents(t,{includeSelf:!0});if(!e)return void await r(t,n);const s=await c(t)||[];await r(t,n);const p=new Map,l=[];for(const t of s)p.set(t.filename,t);for(const e of n)if(t!==e.filename){const t=p.get(e.filename);t&&t.lastmod===e.lastmod?p.delete(e.filename):l.push(e)}for(const t of l)await D(1500),await f(t.filename,"directory"===t.type);for(const t of[...p.values()])await i(t.filename)}catch(t){return void console.error("获取目录内容或转换为XML时出错：",t)}},y=async(t,e=!0)=>{await(async()=>{try{const t=await n.get(s);return!!t&&t===String(!0)}catch(t){return[]}})()?console.log("===已有扫描正在处理中===="):(await p(!0),await f(t,!0),await p(!1),console.log("===扫描完成===="))},w=e.json(),h=t.Router();h.propfind("/dav",m),h.propfind("/dav/*",m),h.get("/dav/*",m),h.get("/api/scanning",(async(t,e)=>{const o=t.params[0]||"/";y(o,!0),e.send({code:0})})),h.post("/api/updateUser",w,(async(t,e)=>{console.log("======="),e.send({success:0})}));export{h as router};
