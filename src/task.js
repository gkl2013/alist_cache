import t from"node-cron";import{createClient as o}from"webdav";import{Level as e}from"level";import r from"fs";import*as n from"path";import{fileURLToPath as a}from"url";const s=new e("./database"),i="SCANNING_IS_DOING",c=async(t,o)=>{console.log("=======insert",t),await s.put(t,JSON.stringify(o))},l=async t=>{try{return await s.del(t)}catch(t){return void console.log("=======",t)}},f=async t=>{await s.put(i,String(t))},u=(t=500)=>new Promise((o=>setTimeout((()=>o(!0)),t)));let m=null;function w(){let t=n.dirname(a(import.meta.url));for(;!r.existsSync(n.join(t,"package.json"));)t=n.dirname(t);return t}w();let p=null;const d=async()=>{if(p)return p;const{protocol:t,port:e,host:a,username:s,password:i}=await(()=>{const t=n.join(w(),"alist.json");return new Promise((o=>{if(m)return o(m);r.readFile(t,"utf8",((t,e)=>{if(t)console.error("读取配置文件失败：",t);else try{const t=JSON.parse(e);return console.log("读取到的配置内容：",t),m=t,o(t)}catch(t){console.error("解析配置文件内容出错：",t)}}))}))})();return p=o(`${t}://${a}:${e}/dav`,{username:s,password:i}),p},y=async(t,o=!0)=>{try{const e=await d(),r=await e.getDirectoryContents(t,{includeSelf:!0});if(!r||0===r.length)return;if(!o)return void await c(t,r);const n=await(async t=>{try{const o=await s.get(t);return o?JSON.parse(o):[]}catch(t){return console.log("=======err",t),[]}})(t)||[];await c(t,r);const a=new Map,i=[];for(const t of n)a.set(t.filename,t);for(const o of r)if(t!==o.filename){const t=a.get(o.filename);t&&t.lastmod===o.lastmod||i.push(o)}for(const t of i)await u(1500),await y(t.filename,"directory"===t.type);for(const[t]of a){r.find((t=>t.filename))&&a.delete(t)}for(const t of[...a.values()])await l(t.filename)}catch(t){return void console.error("获取目录内容或转换为XML时出错：",t)}},g=async(t,o=!0)=>{await(async()=>{try{const t=await s.get(i);return!!t&&t===String(!0)}catch(t){return[]}})()?console.log("===已有扫描正在处理中===="):(await f(!0),await y(t,!0),await f(!1),console.log("===扫描完成===="))},h=()=>{t.schedule("*/10 * * * *",(()=>{console.log("===定时任务启动===="),g("/",!0)}))};export{h as timeSchedule};
