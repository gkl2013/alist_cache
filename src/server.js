import t from"cors";import"dotenv/config";import e from"express";import o from"body-parser";import{Level as n}from"level";import a from"fs";import*as r from"path";import{fileURLToPath as s}from"url";import{createClient as i}from"webdav";import c from"node-cron";const l=new n("./database"),p="SCANNING_IS_DOING",d=async(t,e)=>{console.log("=======insert",t),await l.put(t,JSON.stringify(e))},m=async t=>{try{const e=await l.get(t);return e?JSON.parse(e):[]}catch(t){return console.log("=======err",t),[]}},u=async t=>{try{return await l.del(t)}catch(t){return void console.log("=======",t)}},g=async t=>{await l.put(p,String(t))};let f=null;function D(){let t=r.dirname(s(import.meta.url));for(;!a.existsSync(r.join(t,"package.json"));)t=r.dirname(t);return t}D();const y=()=>{const t=r.join(D(),"alist.json");return new Promise((e=>{if(f)return e(f);a.readFile(t,"utf8",((t,o)=>{if(t)console.error("读取配置文件失败：",t);else try{const t=JSON.parse(o);return console.log("读取到的配置内容：",t),f=t,e(t)}catch(t){console.error("解析配置文件内容出错：",t)}}))}))},w=(t=[])=>{let e='<?xml version="1.0" encoding="UTF-8"?><D:multistatus xmlns:D="DAV:">';return t.forEach((t=>{e+="<D:response>",e+=`<D:href>/dav/${t.filename.replace("/","")}</D:href>`,e+="<D:propstat><D:prop>",e+=`<D:displayname>${t.basename}</D:displayname> `,e+=`<D:getlastmodified>${t.lastmod}</D:getlastmodified> `,e+=`<D:getcontentlength>${t.size}</D:getcontentlength>`,e+=`<D:resourcetype>${"directory"===t.type?'<D:collection xmlns:d="DAV:" />':""}</D:resourcetype>`,t.mime&&(e+=`<D:getcontenttype>${t.mime}</D:getcontenttype>`),t.etag&&(e+=`<D:getetag>${t.etag?`"${t.etag}"`:""}</D:getetag>`),e+="</D:prop><D:status>HTTP/1.1 200 OK</D:status></D:propstat>","directory"===t.type&&(e+="<D:propstat> <D:prop> <D:getcontentlength></D:getcontentlength> <D:getetag></D:getetag> <D:getcontenttype></D:getcontenttype> </D:prop> <D:status>HTTP/1.1 404 Not Found</D:status> </D:propstat>"),e+="</D:response>"})),e+="</D:multistatus>",e},h=async(t,e)=>{const o=decodeURIComponent("/dav"===t.url?"/":t.url.replace("/dav",""));console.log("=======path",o),o||e.send("参数错误");if(delete t.headers.host,"GET"===t.method){const{protocol:t,port:n,host:a,username:r,password:s}=await y(),i=`${t}://${r}:${s}@${a}:${n}/dav${encodeURIComponent(o)}`;e.redirect(i)}if("PROPFIND"===t.method){const t=await(async t=>{const e=await m(t);return w(e)})(o);t?(e.set("Content-Type","application/xml"),e.status(207).send(t)):e.send("参数错误")}},$=(t=500)=>new Promise((e=>setTimeout((()=>e(!0)),t))),v="directory";let N=null;const S=async(t,e=!0)=>{try{const o=await(async()=>{if(N)return N;const{protocol:t,port:e,host:o,username:n,password:a}=await y();return N=i(`${t}://${o}:${e}/dav`,{username:n,password:a}),N})(),n=await o.getDirectoryContents(t,{includeSelf:!0});if(!n||0===n.length)return;if(!e)return void await d(t,n);const a=await m(t)||[];await d(t,n);const r=new Map,s=[];for(const t of a)r.set(t.filename,t);for(const e of n)if(t!==e.filename){const t=r.get(e.filename);(!t||t.lastmod!==e.lastmod||t.lastmod===e.lastmod&&e.type===v)&&s.push(e)}for(const t of s)await $(1500),await S(t.filename,t.type===v);for(const[t]of r){n.find((e=>e.filename===t))||await u(t)}}catch(t){return void console.error("获取目录内容或转换为XML时出错：",t)}},T=async(t,e=!0)=>{await(async()=>{try{const t=await l.get(p);return!!t&&t===String(!0)}catch(t){return[]}})()?console.log("===已有扫描正在处理中===="):(await g(!0),await S(t,!0),await g(!1),console.log("===扫描完成===="))},x=o.json(),I=e.Router();I.propfind("/dav",h),I.propfind("/dav/*",h),I.get("/dav/*",h),I.get("/api/scanning",(async(t,e)=>{const o=t.params[0]||"/";T(o,!0),e.send({code:0})})),I.post("/api/updateUser",x,(async(t,e)=>{console.log("======="),e.send({success:0})}));c.schedule("*/20 * * * *",(()=>{console.log("===定时任务启动===="),T("/",!0)})),(async()=>{await y(),await g(!1),T("/",!0)})();const O=e();O.use(t()),O.use("/",I),O.listen(9115,(()=>{console.log("App listening on port: 9115")}));
