import t from"cors";import"dotenv/config";import e from"express";import o from"body-parser";import{Level as n}from"level";import{createClient as a}from"webdav";import s from"node-cron";const r=new n("./database"),c="SCANNING_IS_DOING",i=async(t,e)=>{console.log("=======insert",t),await r.put(t,JSON.stringify(e))},p=async t=>{try{const e=await r.get(t);return e?JSON.parse(e):[]}catch(t){return console.log("=======err",t),[]}},l=async t=>{try{return await r.del(t)}catch(t){return void console.log("=======",t)}},d=async t=>{await r.put(c,String(t))};var m={protocol:"http",host:"101.35.113.109",port:5244,username:"emby",password:"emby"};const g=()=>(console.log("=======config",m,"object"),new Promise((t=>t(m)))),u=(t=[])=>{let e='<?xml version="1.0" encoding="UTF-8"?><D:multistatus xmlns:D="DAV:">';return t.forEach((t=>{e+="<D:response>",e+=`<D:href>/dav/${t.filename.replace("/","")}</D:href>`,e+="<D:propstat><D:prop>",e+=`<D:displayname>${t.basename}</D:displayname> `,e+=`<D:getlastmodified>${t.lastmod}</D:getlastmodified> `,e+=`<D:getcontentlength>${t.size}</D:getcontentlength>`,e+=`<D:resourcetype>${"directory"===t.type?'<D:collection xmlns:d="DAV:" />':""}</D:resourcetype>`,t.mime&&(e+=`<D:getcontenttype>${t.mime}</D:getcontenttype>`),t.etag&&(e+=`<D:getetag>${t.etag?`"${t.etag}"`:""}</D:getetag>`),e+="</D:prop><D:status>HTTP/1.1 200 OK</D:status></D:propstat>","directory"===t.type&&(e+="<D:propstat> <D:prop> <D:getcontentlength></D:getcontentlength> <D:getetag></D:getetag> <D:getcontenttype></D:getcontenttype> </D:prop> <D:status>HTTP/1.1 404 Not Found</D:status> </D:propstat>"),e+="</D:response>"})),e+="</D:multistatus>",e},D=async(t,e)=>{const o=decodeURIComponent("/dav"===t.url?"/":t.url.replace("/dav",""));console.log("=======path",o),o||e.send("参数错误");if(delete t.headers.host,"GET"===t.method){const{protocol:t,port:n,host:a,username:s,password:r}=await g(),c=`${t}://${s}:${r}@${a}:${n}/dav${encodeURIComponent(o)}`;e.redirect(c)}if("PROPFIND"===t.method){const t=await(async t=>{const e=await p(t);return u(e)})(o);t?(e.set("Content-Type","application/xml"),e.status(207).send(t)):e.send("参数错误")}},f=(t=500)=>new Promise((e=>setTimeout((()=>e(!0)),t)));let y=null;const w=async(t,e=!0)=>{try{const o=await(async()=>{if(y)return y;const{protocol:t,port:e,host:o,username:n,password:s}=await g();return y=a(`${t}://${o}:${e}/dav`,{username:n,password:s}),y})(),n=await o.getDirectoryContents(t,{includeSelf:!0});if(!e)return void await i(t,n);const s=await p(t)||[];await i(t,n);const r=new Map,c=[];for(const t of s)r.set(t.filename,t);for(const e of n)if(t!==e.filename){const t=r.get(e.filename);t&&t.lastmod===e.lastmod?r.delete(e.filename):c.push(e)}for(const t of c)await f(1500),await w(t.filename,"directory"===t.type);for(const t of[...r.values()])await l(t.filename)}catch(t){return void console.error("获取目录内容或转换为XML时出错：",t)}},h=async(t,e=!0)=>{await(async()=>{try{const t=await r.get(c);return!!t&&t===String(!0)}catch(t){return[]}})()?console.log("===已有扫描正在处理中===="):(await d(!0),await w(t,!0),await d(!1),console.log("===扫描完成===="))},v=o.json(),$=e.Router();$.propfind("/dav",D),$.propfind("/dav/*",D),$.get("/dav/*",D),$.get("/api/scanning",(async(t,e)=>{const o=t.params[0]||"/";h(o,!0),e.send({code:0})})),$.post("/api/updateUser",v,(async(t,e)=>{console.log("======="),e.send({success:0})}));s.schedule("*/10 * * * *",(()=>{console.log("===定时任务启动===="),h("/",!0)})),(async()=>{await g(),await d(!1),h("/",!0)})();const N=e();N.use(t()),N.use("/",$),N.listen(9115,(()=>{console.log("App listening on port: 9115")}));
